# Generated by Django 5.1.6 on 2025-06-13 09:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('End-User', 'End-User'), ('Technician', 'Technician'), ('Administrator', 'Administrator'), ('L1_Technician', 'L1_Technician'), ('L2_Technician', 'L2_Technician'), ('CAB', 'CAB')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CABRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(choices=[('Normal Change', 'Normal Change'), ('Standard Change', 'Standard Change'), ('Emergency Change', 'Emergency Change')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('risk_assessment', models.TextField()),
                ('implementation_plan', models.TextField()),
                ('rollback_plan', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='in_progress', max_length=20)),
                ('rejection_reason', models.CharField(blank=True, choices=[('insufficient_info', 'Insufficient Information'), ('high_risk', 'High Risk'), ('no_business_justification', 'No Business Justification'), ('incomplete_rollback_plan', 'Incomplete Rollback Plan'), ('resource_constraints', 'Resource Constraints')], help_text="Applicable only if status is 'rejected'", max_length=50, null=True)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cab_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ticket_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('ticket_title', models.CharField(max_length=255)),
                ('department', models.CharField(choices=[('IT', 'IT'), ('HR', 'HR'), ('Finance', 'Finance')], max_length=100)),
                ('contact_info', models.CharField(max_length=255)),
                ('problem_description', models.TextField()),
                ('priority_level', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High')], max_length=50)),
                ('preferred_contact_method', models.CharField(choices=[('Email', 'Email'), ('Phone', 'Phone')], max_length=50)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='attachments/')),
                ('date_created_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Escalated', 'Escalated'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('accepted_by_l2', models.BooleanField(default=False)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('escalated_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='directly_assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('view_pending_tickets', 'Can view pending tickets'), ('view_escalated_tickets', 'Can view escalated tickets')],
            },
        ),
        migrations.CreateModel(
            name='TicketAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets_assigned_by', to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(limit_choices_to={'groups__name': 'Technician'}, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_ticket_entries', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='helpdeskapp.ticket')),
            ],
            options={
                'ordering': ['-assigned_at'],
                'unique_together': {('ticket', 'technician')},
            },
        ),
    ]
